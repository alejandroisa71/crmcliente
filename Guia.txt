npm init
npm i apollo-server
npm i -D nodemon (reinicia el servidor con los cambios)
en el package.json cambio los scripts
     "start": "node ." (significa que el index de entrada es el el archivo index)
     "dev":"nodemon ." 
http://localhost:4000/graphql para usar playground
se crea cluster en mongodb atlas
npm i mongoose dotenv
npm i bcryptjs(para hassear password)
npm i jsonwebtoken

----------------------GIT---------------------------
git init (esto se hace una sola vez)
en gitignore se ponen los archivos que se van a ignorar(por ejemplo los .env y los node_modules)
git status o git status -s
git add.
git commit -m "primer commit"
git remote add origin https://github.com/alejandroisa71/GraphQL.git
git push -u origin master manda losa cambios a repositorio remoto
git pull me trae los cambios del repositorio remoto
git log --oneline me muestra todos los commits
git reset --hard head 7044610 me regresa al commit indicado (ojo con esto)

-------------------Next Reacts------------
npx create-next-app crmcliente
import Head from 'next/head'====> sirve para agregar algo en el head
en cdnjs/ normailize copiamos lo siguiente y pegamos en el Head====> <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.css" integrity="sha512-oHDEc8Xed4hiW6CxD7qjbnI+B07vDdX7hEPTvn9pSZO1bcRqHp8mj9pyr+8RVC2GmtEfI2Bi9Ke9Ass0as+zpg==" crossorigin="anonymous" />
usamos https://tailwindcss.com/ que es similar a boostrap (no es de componentes sino de clases)
copiamos este enlace y lo pegamos en el Head
Se usa formik y yup ===> npm i formik yup (formik para cuando se tiene varios formularios en el proyecto para ir leyendo loque el usuario va escribiendo  y yup para escribir un Schema de validaciones)
Consultar github.com/jquense/yup par yup
npm i @apollo/client node-fetch
En el archivo congif/apollo.js (primera linea) import {ApolloCache, HttpLink, InMemoryCache} from '@apollo/client'==>HttpLink permite conectarme con mi servidor de Apollo;
En la segunda linea import fetch from 'node-fetch'==> permite traer los resultados y colocarlos en los componentes
En el archivo _app.js en la linea 1 import {ApolloProvider } from '@apollo/client'===>hace que Apollo este disponible en todos los omponentes de la app
npm i graphql
En chrome para instalar dev tools extension ==> https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm 

----------------------useQuery-----------------------------------------------------------
import { useQuery, gql } from "@apollo/client";

const QUERY = gql`
  query obtenerProductos {
    obtenerProductos {
      id
      nombre
      precio
      existencia
    }
  }
`;

const NuevaCuenta = () => {
  // Obtener productos de GrapQL
  //en useQuery('variable')data contiene la informacion, loading para colocar un spinner y error devuelve un error si existiera
  const { data, loading, error } = useQuery(QUERY);
  console.log(data);
  console.log(loading);
  console.log(error);
--------------------------------------fin de useQuery----------------------------------------------------

CUANDO SE UTILIZA QUERY VAN {} Y CUANDO SE UTILIZA MUTATION VA [con la funcion por ejemplo nuevoUsuario]

import {useRouter} from 'next/router' par redirigir a otra pagina
npm i apollo-link-context


https://github.com/tailwindlabs/heroicons para traer iconos gratis
-------------------para alertas------------
https://sweetalert2.github.io/ para los mensajes de alerta
npm install sweetalert

npm i react-select


video 22.8